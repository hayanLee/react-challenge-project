# 전역 상태 관리

1. Props Drilling
   |
   | drilling 힘드네
2. 전역 상태 관리 라이브러리 ex) Redux
   | ㄴ Recoil, Zustand : Redux 넘 복잡, 쉽게 쓸 수 있도록 개량
   | ㄴ React Query : 클라이언트 단에서 비동기 통신 작업 어렵(작성해야 할 코드 많고), 서버 상태 실시간 동기화 어렵
   |
   | 외부 라이브러리 없이 리액트만으로 전역 상태 관리 가능하도록 추가된 api
3. Context

## Redux

1. 특징

    - flux 아키텍처, 단방향 데이터 흐름
    - 복잡 / 엄격 (predictable, maintainable)

2. 사용하기 위해 중요한 것

    1. store : 저장소
    2. reducer : 공장

3. Redux는 데이터를 저장하고, 저장한 데이터를 불러 보여주고, 저장한 데이터를 업데이트하는 라이브러리
   : 저장소 + CRUD

4. CRUD

    - R : 너무 쉽다 (useSelector)
    - CUD : reducer 를 통해 구현

5. 공장 예시

    - 리덕스에는 공장이 있다
    - 공장은 저장소에 있는 값을 mutate하는 일을 한다
    - 공장은 매우 까다롭다
    - 왜? 작업 명세서가 없으면 작업 안해줌
    - 작업 명세서는 어떤 게 있나?
        - 작업의 종류 (필수)
        - 작업에 대한 정보 (상황에 따라 선택적)
    - 작업명세서는 작업 진행이 필요한 컴포넌트에서 작성한다
    - 컴포넌트가 작업명세서를 작성하면, 공장에 작업 명세서를 전달해야한다
    - 우체부 소환 + 작업명세서 전달
    - 공장은 우체부를 통해 작업명세서를 받고, 작업을 진행한다

6. 준비해놔야 하는 내용

    - 공장에서 상태를 다루려면, 상태가 최초에 존재해야한다 -> initalState
    - 작업명세서에 적히게 될 작업의 종류는 미리 정해져야한다 -> aciton.type
    - 작업명세서를 매번 작성하는 것은 비효율적 + 휴먼에러 가능성 -> action creator

7. 정리
    - 공장 : reducer(함수)
    - 작업명세서 : action(객체)
        - 작업의 종류 : action.type
        - 작업에 필요한 정보 : action.payload
    - 우체부 소환 : useDispatch
    - 우체부 : dispatch(함수) (물건을 받아서 전달하므로)
    - 작업명세서 프린터 : action creator(함수)
